// <auto-generated />
using System;
using CAFM.Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CAFM.Database.Migrations
{
    [DbContext(typeof(CmmsBeTestContext))]
    [Migration("20241221093733_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CAFM.Database.Models.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<short?>("AssetOrder")
                        .HasColumnType("smallint");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("InternalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<byte?>("WeeklyOperationHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)50);

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("CAFM.Database.Models.ErrorsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<byte>("ErrFrom")
                        .HasColumnType("tinyint");

                    b.Property<string>("ErrMsg")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ErrSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ErrTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LocalHost")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("SendByEmail")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Serial")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("ErrorsLog", (string)null);
                });

            modelBuilder.Entity("CAFM.Database.Models.MessagesSystem", b =>
                {
                    b.Property<short>("MsgId")
                        .HasColumnType("smallint")
                        .HasColumnName("MsgID");

                    b.Property<string>("Lang")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("MsgText")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("MsgId", "Lang")
                        .HasName("PK_MESSAGES_SYSTEM");

                    b.ToTable("Messages_System", (string)null);
                });

            modelBuilder.Entity("CAFM.Database.Models.TaskPriority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CompletionRateMinutes")
                        .HasColumnType("int");

                    b.Property<int>("DueDateIntervalMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PriorityColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PriorityNameEn")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte>("PriorityOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("ResponseRateMinutes")
                        .HasColumnType("int");

                    b.HasKey("PriorityId")
                        .HasName("PK_TASK_PRIORITIES");

                    b.ToTable("TaskPriorities");
                });

            modelBuilder.Entity("CAFM.Database.Models.TaskStatue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCheckInstructions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StatusNameEn")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("StatusOrder")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("TaskStatues");
                });

            modelBuilder.Entity("CAFM.Database.Models.WorkOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AssetDownTime")
                        .HasColumnType("int");

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CompletionNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompletionRatio")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<long>("InternalNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("TaskAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.Property<short>("TaskTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("CAFM.Database.Models.WorkOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FileURL");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImgURL");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapTypeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VoiceUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VoiceURL");

                    b.Property<long>("WorkOrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Zoom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderDetails");
                });

            modelBuilder.Entity("CAFM.Database.Models.WorkOrder", b =>
                {
                    b.HasOne("CAFM.Database.Models.Asset", "Asset")
                        .WithMany("WorkOrders")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_WorkOrders_Assets");

                    b.HasOne("CAFM.Database.Models.TaskPriority", "Priority")
                        .WithMany("WorkOrders")
                        .HasForeignKey("PriorityId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkOrders_TaskPriorities");

                    b.HasOne("CAFM.Database.Models.TaskStatue", "TaskStatus")
                        .WithMany("WorkOrders")
                        .HasForeignKey("TaskStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkOrders_TaskStatues");

                    b.Navigation("Asset");

                    b.Navigation("Priority");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("CAFM.Database.Models.WorkOrderDetail", b =>
                {
                    b.HasOne("CAFM.Database.Models.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderDetails")
                        .HasForeignKey("WorkOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkOrderDetails_WorkOrders");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("CAFM.Database.Models.Asset", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("CAFM.Database.Models.TaskPriority", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("CAFM.Database.Models.TaskStatue", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("CAFM.Database.Models.WorkOrder", b =>
                {
                    b.Navigation("WorkOrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
